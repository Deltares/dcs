#!/usr/bin/env python

import argparse
import os
import requests

parser = argparse.ArgumentParser(
    description='transfer a zipped directory to the store, note that a "run" file should be in the root.')

parser.add_argument('server', help='specifiy the webserver address')
parser.add_argument('action', help='upload, download or delete the zip file')
parser.add_argument('path', help='path for the file')

args = parser.parse_args()

if args.action not in ('upload', 'download', 'delete'):
    raise Exception(
        'Specify "upload", "download" or "delete" as "up_down_delete" command line argument, not: ' + args.action)

args = args.__dict__

directory, file_name = os.path.split(args['path'])

if args['action'] == 'upload':
    if not os.path.exists(args['path']):
        raise Exception('File does not exist ' + args['path'])
    up_file = os.path.splitext(os.path.basename(args['path']))[0]
    rstr = 'http://%s/wjc/jobs/%s/state' % (args['server'], up_file)
    r = requests.get(rstr)
    if not up_file.startswith('batch-') and not 'booted' in r.content:
        print 'current job state is %s' % r.content
        raise Exception('please wait till the machine has been booted before uploading')
    cstr = 'http://%s/store/%s' % (args['server'], file_name)
    print 'calling %s' % cstr
    r = requests.post(cstr, files={file_name: open(args['path'], 'rb')})
    if r.status_code != 200:
        raise Exception('Status code not 200, %s' % r.content)
    cstr = 'http://%s/wjc/jobs/%s/state/uploaded' % (args['server'], up_file)
    print 'calling %s' % cstr
    r = requests.post(cstr)
    print 'upload done %s' % r
elif args['action'] == 'download':
    if not os.path.exists(directory):
        raise Exception('Directory does not exist ' + directory)
    cstr = 'http://%s/store/%s' % (args['server'], file_name)
    print 'calling %s' % cstr
    r = requests.get(cstr, stream=True)
    if r.status_code != 200:
        raise Exception('Status code not 200, %s' % r.content)
    with open(args['path'], 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024):
            if chunk:
                f.write(chunk)
                f.flush()
    print 'download done to %s' % args['path']
elif args['action'] == 'delete':
    cstr = 'http://%s/store/%s' % (args['server'], file_name)
    print 'calling %s' % cstr
    r = requests.delete(cstr)
    if r.status_code != 200:
        raise Exception('Status code not 200, %s' % r.content)
    print 'deleting done %s' % r
else:
    print '%s not found in the dictionary' % args['action']
